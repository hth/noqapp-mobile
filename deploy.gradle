if (!hasProperty('env')) {
    ext.env = System.env['GRADLE_ENV']
}

println "Building for environment: $env"

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'org.hidetake:gradle-ssh-plugin:2.7.0'
    }
}

apply plugin: 'org.hidetake.ssh'

ssh.settings {
    dryRun = false
    logging = 'stdout'
    timeoutSec = 600000
    identity = file("${System.properties['user.home']}/.ssh/id_rsa")
}

remotes {
    tp1 {
        host = '192.168.1.61'
        user = 'db'
    }
    tp2 {
        host = '192.168.1.62'
        user = 'db'
    }
    tp3 {
        host = '192.168.1.63'
        user = 'db'
    }
}

task deployServer {
    if (env == 'sandbox') {
        deploy(remotes.tp1, "192.168.1.61", "1tp", "$env", "ROOT-$env.*.war", "token-mobile-$env.*.war")
        deploy(remotes.tp2, "192.168.1.62", "2tp", "$env", "ROOT-$env.*.war", "token-mobile-$env.*.war")
        deploy(remotes.tp3, "192.168.1.63", "3tp", "$env-loader", "ROOT-loader-$env.*.war", "token-mobile-$env.*.war")
    }
    if (env == 'prod') {

    }
}

def deploy(def server, def ip, def serverName, def path, def rootFile, def mobileFile) {
    logger.lifecycle("--------------------------------------------")
    logger.lifecycle("         Deploying to $server for $env")
    logger.lifecycle("--------------------------------------------")

    sshExecute(server, 'sudo service tomcat stop')
    sshExecute(server, 'sleep 5')
    sshExecute(server, 'cd /usr/local/tomcat/webapps/; rm -rf *')
    if (env == 'sandbox') {
        sshExecute(server, 'cd /usr/local/tomcat/logs; rm -rf *')
    }
    copyFiles(server, "/var/lib/jenkins/jobs/token-$env-build/workspace/build/war/$path/$rootFile")
    copyFiles(server, "/var/lib/jenkins/jobs/token.mobile-$env-build/workspace/build/war/$env/$mobileFile")
    sshExecute(server, "mkdir /usr/local/tomcat/webapps/ROOT")
    sshExecute(server, "mkdir /usr/local/tomcat/webapps/token-mobile")
    sshExecute(server, "cd /usr/local/tomcat/webapps/; mv $rootFile ROOT/ROOT.war")
    sshExecute(server, "cd /usr/local/tomcat/webapps/; mv $mobileFile token-mobile/token-mobile.war")
    sshExecute(server, "cd /usr/local/tomcat/webapps/ROOT; source ~/.bash_profile; jar xf ROOT.war")
    sshExecute(server, "cd /usr/local/tomcat/webapps/token-mobile; source ~/.bash_profile; jar xf token-mobile.war")
    sshExecute(server, "cd /usr/local/tomcat/webapps/ROOT; rm -rf ROOT.war")
    sshExecute(server, "cd /usr/local/tomcat/webapps/token-mobile; rm -rf token-mobile.war")
    sshExecute(server, "echo 'server=$serverName' >> /usr/local/tomcat/webapps/ROOT/WEB-INF/classes/build-info.properties")
    sshExecute(server, "echo 'server=$serverName' >> /usr/local/tomcat/webapps/token-mobile/WEB-INF/classes/build-info.properties")

    sshExecute(server, "sudo service tomcat start")
    sshExecute(server, "sleep 15")
    sshExecute(server, "sudo service tomcat status")
    sshExecute(server, "curl -I http://$ip:8080/open/login.htm")
    sshExecute(server, "wget -qO- http://$ip:8080/open/login.htm > /dev/null 2>&1")
}

def sshExecute(def server, def cmd) {
    logger.lifecycle("Executing '$cmd'  ...")
    ssh.run {
        session(server) {
            execute(cmd, pty: false)
        }
    }
}

def copyFiles(def server, def filePath) {
    logger.lifecycle("Copying $filePath to $server ... Be patient .. takes time ...")
    ssh.run {
        session(server) {
            put from: files("$filePath"), into: "/usr/local/tomcat/webapps/"
        }
    }
}