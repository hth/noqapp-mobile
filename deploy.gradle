if (!hasProperty('env')) {
    ext.env = System.env['GRADLE_ENV']
}

if (!hasProperty('fastEnabled')) {
    ext.fastEnabled = System.getProperty("fastEnabled")
}

println "Building for environment: $env & fastEnabled: $fastEnabled"

plugins {
    id "org.hidetake.ssh" version "2.10.1"
}

ssh.settings {
    dryRun = false
    logging = 'stdout'
    timeoutSec = 600000
    identity = file("${System.properties['user.home']}/.ssh/id_rsa")
}

remotes {
    //Production live
    n1 {
        host = '10.0.0.53'
        user = 'db'
    }
    n2 {
        host = '10.0.0.63'
        user = 'db'
    }
    n3 {
        host = '10.0.0.73'
        user = 'db'
    }
    n4 {
        host = '10.0.0.83'
        user = 'db'
    }
    //Production Backup
    n13 {
        host = '10.0.0.113'
        user = 'db'
    }
    r1 {
        host = '10.0.0.51'
        user = 'db'
    }
    r2 {
        host = '10.0.0.61'
        user = 'db'
    }
    r3 {
        host = '10.0.0.71'
        user = 'db'
    }
    r4 {
        host = '10.0.0.81'
        user = 'db'
    }
    
    //Sandbox
    sn1 {
        host = '10.0.0.54'
        user = 'db'
    }
    sn2 {
        host = '10.0.0.64'
        user = 'db'
    }
    sn4 {
        host = '10.0.0.84'
        user = 'db'
    }
    //Sandbox Backup
    sn14 {
        host = '10.0.0.114'
        user = 'db'
    }

    sr1 {
        host = '10.0.0.52'
        user = 'db'
    }
    sr2 {
        host = '10.0.0.62'
        user = 'db'
    }
    sr3 {
        host = '10.0.0.72'
        user = 'db'
    }
}

task deployServer {
    if (env == 'sandbox') {
        deploy(remotes.sn1, "10.0.0.54", "1ns", "$env", "ROOT-$env.*.war")
        deployMobile(remotes.sr1, "10.0.0.52", "1rs", "$env", "ROOT-$env.*.war")

        deploy(remotes.sn2, "10.0.0.64", "2ns", "$env", "ROOT-$env.*.war")
        deployMobile(remotes.sr2, "10.0.0.62", "2rs", "$env", "ROOT-$env.*.war")

        deploy(remotes.sn4, "10.0.0.84", "4ns", "$env-loader", "ROOT-loader-$env.*.war")
        deployMobile(remotes.sr3, "10.0.0.72", "3rs", "$env", "ROOT-$env.*.war")
        //deploy(remotes.sn14, "10.0.0.114", "14ns", "$env", "ROOT-$env.*.war", "noqapp-mobile-$env.*.war")
    }
    if (env == 'prod') {
        deploy(remotes.n1, "10.0.0.53", "1n", "$env", "ROOT-$env.*.war")
        deployMobile(remotes.r1, "10.0.0.51", "1r", "$env", "ROOT-$env.*.war")

        deploy(remotes.n2, "10.0.0.63", "2n", "$env", "ROOT-$env.*.war")
        deployMobile(remotes.r2, "10.0.0.61", "2r", "$env", "ROOT-$env.*.war")

        deploy(remotes.n3, "10.0.0.73", "3n", "$env", "ROOT-$env.*.war")
        deployMobile(remotes.r3, "10.0.0.71", "3r", "$env", "ROOT-$env.*.war")

        deploy(remotes.n4, "10.0.0.83", "4n", "$env-loader", "ROOT-loader-$env.*.war")
        deployMobile(remotes.r4, "10.0.0.81", "4r", "$env", "ROOT-$env.*.war")
        //deploy(remotes.n13, "10.0.0.113", "13n", "$env", "ROOT-$env.*.war", "noqapp-mobile-$env.*.war")
    }
}

def deploy(def server, def ip, def serverName, def path, def rootFile) {
    logger.lifecycle("--------------------------------------------")
    logger.lifecycle("         Deploying to $server for $env")
    logger.lifecycle("--------------------------------------------")

    sshExecute(server, 'sudo service tomcat stop')
    if (env == 'prod') {
        sshExecute(server, 'sleep 20')
    } else {
        sshExecute(server, "sleep 5")
    }
    sshExecute(server, 'cd /usr/local/tomcat/webapps/; rm -rf *')
    if (env == 'sandbox') {
        sshExecute(server, 'cd /usr/local/tomcat/logs; rm -rf *')
    }

    copyFiles(server, "/var/lib/jenkins/jobs/noqapp-$env-build/workspace/build/war/$path/$rootFile")
    sshExecute(server, "mkdir /usr/local/tomcat/webapps/ROOT")
    sshExecute(server, "cd /usr/local/tomcat/webapps/; mv $rootFile ROOT/ROOT.war")
    sshExecute(server, "cd /usr/local/tomcat/webapps/ROOT; source ~/.bash_profile; jar xf ROOT.war")
    sshExecute(server, "cd /usr/local/tomcat/webapps/ROOT; rm -rf ROOT.war")
    sshExecute(server, "echo 'server=$serverName' >> /usr/local/tomcat/webapps/ROOT/WEB-INF/classes/build-info.properties")

    sshExecute(server, "sudo service tomcat start")
    if (env == 'prod') {
        sshExecute(server, "sleep 35")
    } else {
        sshExecute(server, "sleep 5")
    }
    sshExecute(server, "sudo service tomcat status")
    sshExecute(server, "curl -I http://$ip:8080/open/login")
    sshExecute(server, "wget -qO- http://$ip:8080/open/login > /dev/null 2>&1")
}

def deployMobile(def server, def ip, def serverName, def path, def mobileFile) {
    logger.lifecycle("--------------------------------------------")
    logger.lifecycle("         Deploying to $server for $env")
    logger.lifecycle("--------------------------------------------")

    sshExecute(server, 'sudo service tomcat stop')
    if (env == 'prod') {
        sshExecute(server, 'sleep 20')
    } else {
        sshExecute(server, "sleep 5")
    }
    sshExecute(server, 'cd /usr/local/tomcat/webapps/; rm -rf *')
    if (env == 'sandbox') {
        sshExecute(server, 'cd /usr/local/tomcat/logs; rm -rf *')
    }

    if (fastEnabled.toBoolean()) {
        copyFiles(server, "/var/lib/jenkins/jobs/noqapp.mobile-$env-build-fast/workspace/build/war/$env/$mobileFile")
    } else {
        copyFiles(server, "/var/lib/jenkins/jobs/noqapp.mobile-$env-build/workspace/build/war/$env/$mobileFile")
    }
    sshExecute(server, "mkdir /usr/local/tomcat/webapps/ROOT")
    sshExecute(server, "cd /usr/local/tomcat/webapps/; mv $mobileFile ROOT/ROOT.war")
    sshExecute(server, "cd /usr/local/tomcat/webapps/ROOT; source ~/.bash_profile; jar xf ROOT.war")
    sshExecute(server, "cd /usr/local/tomcat/webapps/ROOT; rm -rf ROOT.war")
    sshExecute(server, "echo 'server=$serverName' >> /usr/local/tomcat/webapps/ROOT/WEB-INF/classes/build-info.properties")

    sshExecute(server, "sudo service tomcat start")
    if (env == 'prod') {
        sshExecute(server, "sleep 35")
    } else {
        sshExecute(server, "sleep 5")
    }
    sshExecute(server, "sudo service tomcat status")
    sshExecute(server, "wget -qO- http://$ip:8080/open/healthCheck > /dev/null 2>&1")
}

def sshExecute(def server, def cmd) {
    logger.lifecycle("Executing '$cmd'  ...")
    ssh.run {
        session(server) {
            execute(cmd, pty: false)
        }
    }
}

def copyFiles(def server, def filePath) {
    logger.lifecycle("Copying $filePath to $server ... Be patient .. takes time ...")
    ssh.run {
        session(server) {
            put from: files("$filePath"), into: "/usr/local/tomcat/webapps/"
        }
    }
}
