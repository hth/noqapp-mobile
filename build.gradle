import com.github.spotbugs.SpotBugsTask

if (!hasProperty('env')) {
    ext.env = System.env['GRADLE_ENV']
}

println "Building for environment: $env"

ext {
    webInf = file('/WEB-INF')
    freemarker = file("$webInf/freemarker")
    lib = file("$webInf/lib")
    javaClasses = file("$webInf/classes")
    conf = file("$javaClasses/conf")
    xslfo = file("$javaClasses/xslfo")
    geo_db = file("$javaClasses/geo_db")

    warDir = file("$buildDir/explodedWar/$env")
    warWebInfDir = file("$warDir$webInf")
    warLibDir = file("$warDir$lib")
    warClassesDir = file("$warDir$javaClasses")
    warConfDir = file("$warDir$conf")
    warXslfoDir = file("$warDir$xslfo")
    warGeoDBDir = file("$warDir$geo_db")

    unzipDir = file("${buildDir}/unpacked/dist")
    unzipLibDir = file("$unzipDir$lib")

    passFileLocal = file('view/resources/conf/pass.properties')
    passFileTest = file(passwordTestFileLocation)
    passFileProd = file(passwordProdFileLocation)

    firebaseFileLocal = file('view/resources/conf/noq-app-inc-firebase-adminsdk.json')
    firebaseFileTest = file(firebaseAdminTestFileLocation)
    firebaseFileProd = file(firebaseAdminProdFileLocation)

    geoDBLocal = file('view/resources/geo_db/GeoLite2-City.mmdb')
    geoDBTest = file(geoDBTestFileLocation)
    geoDBProd = file(geoDBProdFileLocation)
}

buildscript {
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:$spotbugsPluginGradle"
        classpath 'org.owasp:dependency-check-gradle:5.1.0'
    }
}

allprojects {
    group = 'com.noqapp.mobile'
    apply from: "$rootDir/versioning.gradle"
}

subprojects {
    apply plugin: 'idea'
    apply plugin: 'java'

    apply plugin: 'checkstyle'  //for java code conventions, you can use sonar instead but it need DB
    apply plugin: 'pmd'
    apply plugin: 'jacoco'      //for code coverage'
    apply plugin: 'com.github.spotbugs'
    apply plugin: 'org.owasp.dependencycheck'

    compileJava {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
        // Detecting annotation processors on the compile classpath is deprecated and Gradle 5.0 will ignore them.
        options.compilerArgs += ["-proc:none"]
    }

    sourceSets {
        test {
            resources.srcDirs = ['src/test/resources']
            java.srcDirs = ['src/test/java']
        }
    }
    
    jar {
        manifest {
            attributes(
                    "Implementation-Vendor": "NoQueue Inc",
                    "Implementation-Title": rootProject.name,
                    "Implementation-Version": allprojects.version + " $env",
                    "Copyright": "2016-2019, NoQueue Inc"
            )
        }
    }

    idea {
        module {
            downloadSources = true
            downloadJavadoc = true
        }
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url "http://repo.spring.io/libs-milestone" }
        maven { url "http://repo1.maven.org/maven2/" }
        maven { url 'https://repo.spring.io/libs-snapshot' }
    }

    dependencies {
        implementation "com.noqapp:common:1.3.+"
        implementation "com.noqapp:domain:1.3.+"
        implementation "com.noqapp:health:1.3.+"
        implementation "com.noqapp:medical:1.3.+"
        implementation "com.noqapp:service:1.3.+"
        implementation "com.noqapp:search:1.3.+"
        implementation "com.noqapp:social:1.3.+"

        implementation 'org.apache.geronimo.specs:geronimo-j2ee-management_1.1_spec:1.0.1'
        implementation 'org.apache.geronimo.specs:geronimo-jms_1.1_spec:1.1.1'

        implementation "$springGroup:spring-aop:$springVersion"
        implementation "$springGroup:spring-aspects:$springVersion"
        implementation "$springGroup:spring-beans:$springVersion"
        implementation "$springGroup:spring-context:$springVersion"
        implementation "$springGroup:spring-context-support:$springVersion"
        implementation "$springGroup:spring-core:$springVersion"
        implementation "$springGroup:spring-expression:$springVersion"
        implementation "$springGroup:spring-instrument:$springVersion"
        implementation "$springGroup:spring-jms:$springVersion"
        implementation "$springGroup:spring-oxm:$springVersion"
        implementation "$springGroup:spring-test:$springVersion"
        implementation "$springGroup:spring-tx:$springVersion"
        implementation "$springGroup:spring-web:$springVersion"
        implementation "$springGroup:spring-webmvc:$springVersion"

        implementation "$springSecurityGroup:spring-security-aspects:$springSecurityVersion"
        implementation "$springSecurityGroup:spring-security-config:$springSecurityVersion"
        implementation "$springSecurityGroup:spring-security-core:$springSecurityVersion"
        implementation "$springSecurityGroup:spring-security-crypto:$springSecurityVersion"
        implementation "$springSecurityGroup:spring-security-taglibs:$springSecurityVersion"
        implementation "$springSecurityGroup:spring-security-web:$springSecurityVersion"

        implementation "$springDataGroup:spring-data-mongodb:$springDataMongo"
        implementation "$springDataGroup:spring-data-commons:$springDataCommon"
        implementation "org.mongodb:mongo-java-driver:$mongoJavaDriver"

        implementation "org.elasticsearch.client:elasticsearch-rest-high-level-client:$elastic"
        /* For elastic. */
        implementation "org.apache.logging.log4j:log4j-to-slf4j:$log4jToSlf4j"

        implementation "com.braintreepayments.gateway:braintree-java:$braintree"
        implementation "$springDataGroup:spring-data-redis:$redis"
        implementation "redis.clients:jedis:$jedis"
        implementation "org.quartz-scheduler:quartz:$quartz"

        implementation "com.squareup.okhttp3:okhttp:$okhttp"
        implementation "com.google.zxing:core:$zxing"
        implementation "aopalliance:aopalliance:1.0"
        implementation "org.apache.commons:commons-vfs2:$vfs2"
        implementation "org.apache.commons:commons-csv:$csv"
        implementation "com.jcraft:jsch:$jsch"

        implementation "org.aspectj:aspectjrt:$aspectjrt"
        implementation "org.slf4j:slf4j-api:$slf4japi"
        implementation "org.jboss.logging:jboss-logging:$jbosslogging"
        implementation "mysql:mysql-connector-java:$mysqlConnector"
        implementation "com.zaxxer:HikariCP:$hikariCP"
        implementation "joda-time:joda-time:$joda"
        implementation "org.freemarker:freemarker:$freemarker"
        implementation "org.apache.xmlgraphics:fop:$fop"

        implementation "edu.stanford.nlp:stanford-corenlp:$corenlp"
        implementation "edu.stanford.nlp:stanford-corenlp:$corenlp:models"

        implementation "com.google.guava:guava:$guava"
        implementation "com.google.code.gson:gson:$gson"
        implementation "com.google.maps:google-maps-services:$googleMapsServices"
        implementation "com.googlecode.libphonenumber:libphonenumber:$libphonenumber"
        implementation "com.googlecode.owasp-java-html-sanitizer:owasp-java-html-sanitizer:r239"
        implementation("com.google.firebase:firebase-admin:$firebase") {
            exclude group: 'com.google.guava'
        }

        implementation "com.fasterxml:classmate:$classmate"
        implementation "com.fasterxml.jackson.core:jackson-annotations:$jackson"
        implementation "com.fasterxml.jackson.core:jackson-core:$jackson"
        implementation "com.fasterxml.jackson.core:jackson-databind:$jackson"
        implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:$jackson"

        implementation "org.json:json:$json"
        implementation "com.maxmind.geoip2:geoip2:$geoip2"

        implementation "commons-fileupload:commons-fileupload:$commonsfileupload"
        implementation "commons-io:commons-io:$commonsio"
        implementation "commons-validator:commons-validator:$commonsvalidator"
        implementation "commons-codec:commons-codec:1.11"
        implementation "commons-logging:commons-logging:1.2"

        implementation "javax.mail:javax.mail-api:$javaxMail"
        implementation "javax.validation:validation-api:$javaxValidation"
        implementation "javax.inject:javax.inject:1"

        implementation "org.apache.commons:commons-lang3:$commonslang3"
        implementation "org.apache.commons:commons-text:$commonsText"
        implementation "org.apache.poi:poi:$poi"
        implementation "org.apache.tika:tika-parsers:$tika"
        implementation "org.apache.tika:tika-core:$tika"
        implementation "org.apache.commons:commons-collections4:$commonsCollections"

        implementation "ch.qos.logback:logback-core:$logback"
        implementation "ch.qos.logback:logback-classic:$logback"
        implementation "net.logstash.logback:logstash-logback-encoder:$logstashlogbackencoder"
        implementation "net.bull.javamelody:javamelody-core:$javamelody"
        /** Because using org.junit.Assert in code. */
        implementation "org.junit.jupiter:junit-jupiter-engine:$junit5"
        implementation "org.hamcrest:hamcrest-all:1.3"

        testImplementation "org.junit.jupiter:junit-jupiter-api:$junit5"
        testImplementation "org.mockito:mockito-core:$mockito"
        testImplementation "org.mockito:mockito-inline:$mockito"
        testImplementation "de.flapdoodle.embed:de.flapdoodle.embed.mongo:$flapdoodle"
        testImplementation "org.springframework:spring-test:$springVersion"
        testImplementation "org.awaitility:awaitility:$awaitility"
        testImplementation "org.elasticsearch.test:framework:$elastic"

        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit5"
        testRuntimeOnly "org.junit.platform:junit-platform-launcher:$junitPlatform"
        testImplementation "org.junit.jupiter:junit-jupiter-params:$junit5"
    }

    test {
        useJUnitPlatform()
        failFast = true
        testLogging {
            events 'PASSED', 'FAILED', 'SKIPPED'
        }
        afterSuite { desc, result ->
            if (!desc.parent) {
                println "\nTest result: ${result.resultType}"
                println "Test summary: ${result.testCount} tests completed, " +
                        "${result.successfulTestCount} succeeded, " +
                        "${result.failedTestCount} failed, " +
                        "${result.skippedTestCount} skipped"
            }
        }

        jacoco {
            destinationFile = file("${buildDir}/jacoco/test.exec")
        }
    }

    checkstyle {
        toolVersion = '8.22'
        ignoreFailures = true
        configDir = file("$rootProject.projectDir/config/checkstyle")
    }

    pmd {
        ignoreFailures = true
        toolVersion = '6.16.0'

        ruleSets = [
                "java-basic",
                "java-braces",
                "java-naming",
                "java-android",
                "java-clone",
                "java-codesize",
                "java-controversial",
                "java-design",
                "java-finalizers",
                "java-imports",
                "java-j2ee",
                "java-javabeans",
                "java-junit",
                "java-migrating",
                "java-optimizations",
                "java-strictexception",
                "java-strings",
                "java-sunsecure",
                "java-typeresolution",
                "java-unusedcode"
        ]
    }

    jacoco {
        toolVersion = "0.8.4"
    }

    spotbugs {
        toolVersion = '3.1.12'
        ignoreFailures = true
        effort = 'max'
        showProgress = true
    }

    tasks.withType(SpotBugsTask) {
        reports {
            xml.enabled = true
            html.enabled = false
        }
    }

    tasks.withType(Pmd) {
        reports {
            xml.enabled = true
            html.enabled = true
        }
    }

    tasks.withType(JavaCompile) {
        options.incremental = true
    }

// Sonar run rests here. I could not run this using gradle but standalone is working well
//    apply plugin: 'sonar'
//    apply plugin: 'sonar-runner'
//    sonarRunner {
//        sonarProperties {
//            property 'sonar.projectKey', 'receipt-mobile-application'
//            property 'sonar.projectName', 'Receipt Mobile Application'
//            property 'sonar.projectDescription', 'Receipt Mobile Application'
//            property 'sonar.projectVersion', '1.0'
//
//            property 'sonar.language', 'java'
//            property 'sonar.verbose', 'true'
//            property 'sonar.sourceEncoding', 'UTF-8'
//
//            // sonar server and database
//            property "sonar.host.url", "sonar.receiptofi.com"
//            property "sonar.jdbc.url", 'jdbc:mysql://192.168.1.68:3306/sonar?useUnicode=true&amp;characterEncoding=utf8'
//            //property "sonar.jdbc.driverClassName", "com.mysql.jdbc.Driver"
//            property "sonar.jdbc.username", 'receiptofi'
//            property "sonar.jdbc.password", 'r3f02\\!M'
//
//            property 'sonar.jacoco.reportPath', "${buildDir}/jacoco/test.exec"
//            property 'sonar.junit.reportsPath', "${buildDir}/test-results"
//        }
//    }
}

project(':common') {
    jar.archiveBaseName = 'noqapp.mobile-common'
}

project(':domain') {
    jar.archiveBaseName = 'noqapp.mobile-domain'

    dependencies {
        compile project(':common')
    }
}

project(':security') {
    apply plugin: 'war'
    jar.archiveBaseName = 'noqapp.mobile-security'

    repositories {
        mavenCentral()
    }

    dependencies {
        compile project(':domain')

        providedCompile 'javax.servlet:javax.servlet-api:3.1.+'
        runtime 'javax.servlet:jstl:1.+'
    }
}

project(':service') {
    jar.archiveBaseName = 'noqapp.mobile-service'

    dependencies {
        compile project(':common'),
                project(':domain')
    }
}

project(':view') {
    apply plugin: 'war'
    jar.archiveBaseName = 'noqapp.mobile-view'
    war.baseName = 'noqapp.mobile-view'

    repositories {
        mavenCentral()
    }

    dependencies {
        compile project(':common'),
                project(':domain'),
                project(':security'),
                project(':service')

        providedCompile 'javax.servlet:javax.servlet-api:3.1.+'
        runtime 'javax.servlet:jstl:1.+'
    }
}

task copyJars(type: Copy) {
    from 'common/build/libs'
    from 'domain/build/libs'
    from 'security/build/libs'
    from 'service/build/libs'
    from 'view/build/libs'
    into warLibDir
    include '**/*.jar'
}

task unzip(type: Copy, dependsOn: [':view:war']) {
    def zipFile = file("view/build/libs/noqapp.mobile-view-${version}.war")

    from zipTree(zipFile)
    into unzipDir
}

task createBuildInfoFile {
    doLast {
        buildDir.mkdirs()
        def buildInfoFile = new File("$buildDir/build-info.properties")
        Properties props = new Properties()
        props.setProperty('owner', 'NoQueue Inc')
        props.setProperty('copyright', 'All rights reserved')
        props.setProperty('build.version', project.version.toString())
        props.setProperty('build.env', "$env")

        props.store(buildInfoFile.newWriter(), null)
    }
}

task prepWar(dependsOn: [
        createBuildInfoFile,
        unzip,
        copyJars
]) {
    doLast {
        warClassesDir.mkdirs()
        warConfDir.mkdirs()
        warXslfoDir.mkdirs()

        copy {
            from 'view/web'
            into warDir
        }

        copy {
            from file("view/environment/$env/$env" + ".properties")
            into warConfDir
        }

        copy {
            from 'view/resources/xslfo'
            into warXslfoDir
        }

        copy {
            from 'view/resources/conf/application-messages.properties'
            from 'view/resources/conf/config.properties'
            from 'view/resources/conf/300x300_overlay_code_qr.png'

            if (env == 'prod') {
                if (passFileProd.exists()) {
                    from passwordProdFileLocation
                } else {
                    throw new Exception("Required pass file does not exists: $passFileProd.canonicalPath")
                }

                if (firebaseFileProd.exists()) {
                    from firebaseAdminProdFileLocation
                } else {
                    throw new Exception("Required firebase file does not exists: $firebaseFileProd.canonicalPath")
                }
            }

            if (env == 'sandbox') {
                if (passFileTest.exists()) {
                    from passwordTestFileLocation
                } else {
                    throw new Exception("Required pass file does not exists: $passFileTest.canonicalPath")
                }

                if (firebaseFileTest.exists()) {
                    from firebaseAdminTestFileLocation
                } else {
                    throw new Exception("Required firebase file does not exists: $firebaseFileTest.canonicalPath")
                }
            }

            if (env == 'dev') {
                println "Development environment, getting local pass file $passFileLocal.canonicalPath"
                if (passFileLocal.exists()) {
                    from 'view/resources/conf/pass.properties'
                } else {
                    throw new Exception("Required pass file does not exists: $passFileLocal.canonicalPath")
                }

                println "Development environment, getting local firebase file $firebaseFileLocal.canonicalPath"
                if (firebaseFileLocal.exists()) {
                    from 'view/resources/conf/noq-app-inc-firebase-adminsdk.json'
                } else {
                    throw new Exception("Required firebase file does not exists: $firebaseFileLocal.canonicalPath")
                }
            }

            into warConfDir
        }

        copy {
            if (env == 'prod') {
                if (geoDBProd.exists()) {
                    from geoDBProdFileLocation
                } else {
                    throw new Exception("Required GeoLite file does not exists: $geoDBProdFileLocation.canonicalPath")
                }
            }

            if (env == 'sandbox') {
                if (geoDBTest.exists()) {
                    from geoDBTestFileLocation
                } else {
                    throw new Exception("Required GeoLite file does not exists: $geoDBTestFileLocation.canonicalPath")
                }
            }

            if (env == 'dev') {
                println "Development environment, getting local GeoLite file $geoDBLocal.canonicalPath"
                if (geoDBLocal.exists()) {
                    from 'view/resources/geo_db/GeoLite2-City.mmdb'
                } else {
                    throw new Exception("Required GeoLite file does not exists: $geoDBProdFileLocation.canonicalPath")
                }
            }

            into warGeoDBDir
        }

        copy {
            from "view/environment/$env/logback.xml"
            from 'view/resources/conf/messages.properties'
            into warClassesDir
        }

        copy {
            from "view/environment/$env/noqapp-mobile-servlet.xml"
            into warWebInfDir
        }

        copy {
            from unzipLibDir
            into warLibDir
        }

        copy {
            from "${buildDir}/build-info.properties"
            into warClassesDir
        }
    }
}

task clean(type: Delete) {
    delete buildDir
}

task war(type: War, dependsOn: prepWar) {
    archiveBaseName = "noqapp-mobile-$env" + "." + project.version.toString()
    from warDir
    version ""
    destinationDir = file("$buildDir/war/$env")
}

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    // Include the results from the `test` task in all subprojects
    reportOn subprojects*.test

    doLast {
        println "Test reports for all test complete"
    }
}

defaultTasks 'clean', 'build', 'jar', 'war', 'test', 'testReport', 'jacocoTestReport'
